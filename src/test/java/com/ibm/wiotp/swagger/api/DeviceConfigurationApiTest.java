/*
 * IBM Watson IoT Platform Organization Administration REST APIs
 * The Organization Adminstration APIs can be used to configure an organization (including  creating and deleting devices), checking usage, service status and diagnosing device  connection problems. For information on this API, and how to use Watson IoT Platform APIs generally see  [the API documentation](https://console.ng.bluemix.net/docs/services/IoT/reference/api.html). 
 *
 * OpenAPI spec version: 0002
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ibm.wiotp.swagger.api;

import com.ibm.wiotp.swagger.ApiException;
import java.math.BigDecimal;
import com.ibm.wiotp.swagger.model.Device;
import com.ibm.wiotp.swagger.model.DeviceAdditionRequest;
import com.ibm.wiotp.swagger.model.DeviceAdditionResponse;
import com.ibm.wiotp.swagger.model.DeviceConcise;
import com.ibm.wiotp.swagger.model.DeviceListResponse;
import com.ibm.wiotp.swagger.model.DeviceUpdateRequest;
import com.ibm.wiotp.swagger.model.EdgeStatusResponse;
import com.ibm.wiotp.swagger.model.EdgeStatusResponseByService;
import com.ibm.wiotp.swagger.model.ErrorMessage;
import com.ibm.wiotp.swagger.model.InvalidRequestMessage;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DeviceConfigurationApi
 */
@Ignore
public class DeviceConfigurationApiTest {

    private final DeviceConfigurationApi api = new DeviceConfigurationApi();

    
    /**
     * Remove device
     *
     * Removes a device.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deviceTypesTypeIdDevicesDeviceIdDeleteTest() throws ApiException {
        String typeId = null;
        String deviceId = null;
        api.deviceTypesTypeIdDevicesDeviceIdDelete(typeId, deviceId);

        // TODO: test validations
    }
    
    /**
     * Get devices that are connected through the gateway specified by id {deviceId}
     *
     * Gets information on devices that are connected through the specified gateway (typeId, deviceId) to Watson IoT Platform.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deviceTypesTypeIdDevicesDeviceIdDevicesGetTest() throws ApiException {
        String typeId = null;
        String deviceId = null;
        DeviceListResponse response = api.deviceTypesTypeIdDevicesDeviceIdDevicesGet(typeId, deviceId);

        // TODO: test validations
    }
    
    /**
     * Return the status of containers from an edge node.
     *
     * Return the status of containers from an edge node.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deviceTypesTypeIdDevicesDeviceIdEdgestatusGetTest() throws ApiException {
        String typeId = null;
        String deviceId = null;
        EdgeStatusResponse response = api.deviceTypesTypeIdDevicesDeviceIdEdgestatusGet(typeId, deviceId);

        // TODO: test validations
    }
    
    /**
     * Return the status of containers from an edge node filtering by service.
     *
     * Return the status of containers from an edge node filtering by service.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deviceTypesTypeIdDevicesDeviceIdEdgestatusServiceIdGetTest() throws ApiException {
        String typeId = null;
        String deviceId = null;
        String serviceId = null;
        EdgeStatusResponseByService response = api.deviceTypesTypeIdDevicesDeviceIdEdgestatusServiceIdGet(typeId, deviceId, serviceId);

        // TODO: test validations
    }
    
    /**
     * Get device
     *
     * Gets device details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deviceTypesTypeIdDevicesDeviceIdGetTest() throws ApiException {
        String typeId = null;
        String deviceId = null;
        List<String> expand = null;
        Device response = api.deviceTypesTypeIdDevicesDeviceIdGet(typeId, deviceId, expand);

        // TODO: test validations
    }
    
    /**
     * Update device
     *
     * Updates a device.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deviceTypesTypeIdDevicesDeviceIdPutTest() throws ApiException {
        String typeId = null;
        String deviceId = null;
        DeviceUpdateRequest deviceUpdate = null;
        DeviceConcise response = api.deviceTypesTypeIdDevicesDeviceIdPut(typeId, deviceId, deviceUpdate);

        // TODO: test validations
    }
    
    /**
     * List devices
     *
     * Sorting can be performed on any of the following properties (sort order can be reversed by prefixing the property name with &#39;-&#39;): - typeId - deviceId - deviceInfo.description - deviceInfo.descriptiveLocation - deviceInfo.serialNumber - deviceInfo.deviceClass - deviceInfo.fwVersion - deviceInfo.hwVersion - deviceInfo.manufacturer - deviceInfo.model - mgmt.dormant - mgmt.supports.deviceActions - mgmt.supports.firmwareActions - registration.date - status.alert.enabled - status.alert.timestamp  The following facets are supported: - typeId - deviceInfo.deviceClass - deviceInfo.fwVersion - deviceInfo.hwVersion - deviceInfo.manufacturer - deviceInfo.model - mgmt.dormant - mgmt.supports.deviceActions - mgmt.supports.firmwareActions - status.alert.enabled
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deviceTypesTypeIdDevicesGetTest() throws ApiException {
        String typeId = null;
        String bookmark = null;
        BigDecimal limit = null;
        List<String> sort = null;
        List<String> facets = null;
        String deviceId = null;
        Boolean statusAlertEnabled = null;
        String gatewayTypeId = null;
        String gatewayId = null;
        Boolean mgmtDormant = null;
        Boolean mgmtSupportsDeviceActions = null;
        Boolean mgmtSupportsFirmwareActions = null;
        Object registrationDate = null;
        String deviceInfoDescription = null;
        String deviceInfoDescriptiveLocation = null;
        String deviceInfoSerialNumber = null;
        String deviceInfoDeviceClass = null;
        String deviceInfoFwVersion = null;
        String deviceInfoHwVersion = null;
        String deviceInfoManufacturer = null;
        String deviceInfoModel = null;
        DeviceListResponse response = api.deviceTypesTypeIdDevicesGet(typeId, bookmark, limit, sort, facets, deviceId, statusAlertEnabled, gatewayTypeId, gatewayId, mgmtDormant, mgmtSupportsDeviceActions, mgmtSupportsFirmwareActions, registrationDate, deviceInfoDescription, deviceInfoDescriptiveLocation, deviceInfoSerialNumber, deviceInfoDeviceClass, deviceInfoFwVersion, deviceInfoHwVersion, deviceInfoManufacturer, deviceInfoModel);

        // TODO: test validations
    }
    
    /**
     * Add device
     *
     * Adds a device.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deviceTypesTypeIdDevicesPostTest() throws ApiException {
        String typeId = null;
        DeviceAdditionRequest device = null;
        DeviceAdditionResponse response = api.deviceTypesTypeIdDevicesPost(typeId, device);

        // TODO: test validations
    }
    
}
